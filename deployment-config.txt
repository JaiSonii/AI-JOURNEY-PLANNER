# docker-compose.yml - For local development
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=${REDIS_URL}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - redis

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

---
# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

---
# backend/Dockerfile
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci

COPY . .

EXPOSE 3001

CMD ["npm", "start"]

---
# frontend/vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "build"
      }
    }
  ],
  "routes": [
    {
      "src": "/static/(.*)",
      "dest": "/static/$1"
    },
    {
      "src": "/favicon.ico",
      "dest": "/favicon.ico"
    },
    {
      "src": "/manifest.json",
      "dest": "/manifest.json"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "env": {
    "REACT_APP_API_URL": "@journey-planner-api-url",
    "REACT_APP_GOOGLE_CLIENT_ID": "@google-client-id"
  }
}

---
# backend/railway.json
{
  "build": {
    "builder": "nixpacks",
    "buildCommand": "npm install"
  },
  "deploy": {
    "startCommand": "npm start",
    "restartPolicyType": "always",
    "restartPolicyMaxRetries": 3
  },
  "services": [
    {
      "name": "journey-planner-api",
      "source": {
        "repo": "github.com/yourusername/journey-planner-api"
      }
    }
  ]
}

---
# .env.example
# Frontend
REACT_APP_API_URL=http://localhost:3001
REACT_APP_GOOGLE_CLIENT_ID=your-google-client-id

# Backend
NODE_ENV=development
PORT=3001
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your-supabase-anon-key
REDIS_URL=redis://localhost:6379
DEEPSEEK_API_KEY=your-deepseek-api-key
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
JWT_SECRET=your-jwt-secret
ORS_API_KEY=your-openrouteservice-api-key

---
# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Build
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Railway
        uses: berviantoleo/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: journey-planner-api

---
# frontend/package.json
{
  "name": "journey-planner-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@react-oauth/google": "^0.11.1",
    "@supabase/supabase-js": "^2.38.0",
    "axios": "^1.6.0",
    "leaflet": "^1.9.4",
    "lucide-react": "^0.263.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-leaflet": "^4.2.1",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.3.0",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "zustand": "^4.4.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/leaflet": "^1.9.3",
    "@types/node": "^16.18.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0"
  }
}

---
# backend/package.json
{
  "name": "journey-planner-backend",
  "version": "1.0.0",
  "description": "AI-powered journey planner API for ASEAN cities",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.38.0",
    "axios": "^1.6.0",
    "bull": "^4.11.0",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "google-auth-library": "^9.0.0",
    "ioredis": "^5.3.2",
    "jsonwebtoken": "^9.0.2",
    "node-cron": "^3.0.2"
  },
  "devDependencies": {
    "jest": "^29.5.0",
    "nodemon": "^3.0.1",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}

---
# README.md
# ASEAN Journey Planner - AI-Powered Urban Commute Solution

## Overview
An AI-powered journey planning web application designed to help working adults in ASEAN metropolitan cities optimize their daily commutes through intelligent route recommendations, real-time traffic analysis, and multi-modal transportation options.

## Features
- üöÄ **AI-Powered Trip Planning**: Natural language processing for journey queries
- üó∫Ô∏è **Multi-Modal Transportation**: Support for cars, motorcycles, public transit, walking, and cycling
- üìä **Real-Time Traffic Updates**: Live congestion data and predictive analysis
- üí∞ **Cost Comparison**: Compare costs across different transport modes
- üìÖ **Calendar Integration**: Sync with Google Calendar for automatic journey planning
- üîê **Social Login**: Secure authentication via Google OAuth
- üìà **Pattern Recognition**: Learn user commute patterns for better recommendations

## Technology Stack
### Frontend
- React 18 with TypeScript
- Tailwind CSS for styling
- Leaflet for maps
- Zustand for state management
- Deployed on Vercel

### Backend
- Node.js with Express
- PostgreSQL (Supabase)
- Redis for caching (Upstash)
- DeepSeek AI for NLP
- Deployed on Railway

### External APIs
- OpenStreetMap & OpenRouteService for routing
- Google Calendar API
- Google OAuth for authentication

## Getting Started

### Prerequisites
- Node.js 18+
- npm or yarn
- Supabase account
- Vercel account
- Railway account
- Google Cloud Console project

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/asean-journey-planner.git
cd asean-journey-planner
```

2. Install frontend dependencies:
```bash
cd frontend
npm install
```

3. Install backend dependencies:
```bash
cd ../backend
npm install
```

4. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your actual values
```

5. Run locally:
```bash
# Terminal 1 - Backend
cd backend
npm run dev

# Terminal 2 - Frontend
cd frontend
npm start
```

## Deployment

### Frontend (Vercel)
```bash
cd frontend
vercel --prod
```

### Backend (Railway)
```bash
cd backend
railway up
```

## Cost Analysis
- **Monthly Cost**: ~$1.50 (using free tiers)
- **Primary Costs**: AI API usage
- **Scaling**: ~$15/month for 1,000 DAU

## Testing
Run the test suite:
```bash
# Backend tests
cd backend
npm test

# Frontend tests
cd frontend
npm test
```

## Architecture
The application follows a microservices architecture with:
- React frontend for user interface
- Express.js API backend
- PostgreSQL for data persistence
- Redis for caching
- AI services for intelligent features

## Contributing
1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License
This project is licensed under the MIT License.

## Support
For support, email support@aseanjourney.com or join our Slack channel.

---
# Setup Instructions

## 1. Supabase Setup
1. Create a new Supabase project
2. Run the SQL migrations in `database/migrations.sql`
3. Copy the project URL and anon key to `.env`

## 2. Google Cloud Setup
1. Create a new project in Google Cloud Console
2. Enable Google Calendar API and Google OAuth 2.0
3. Create OAuth 2.0 credentials
4. Add authorized redirect URIs for your domains
5. Copy client ID and secret to `.env`

## 3. DeepSeek API Setup
1. Sign up at https://platform.deepseek.com
2. Create an API key
3. Add to `.env`

## 4. Vercel Deployment
1. Install Vercel CLI: `npm i -g vercel`
2. Run `vercel` in the frontend directory
3. Follow the prompts
4. Add environment variables in Vercel dashboard

## 5. Railway Deployment
1. Install Railway CLI
2. Run `railway login`
3. Run `railway init` in backend directory
4. Add environment variables in Railway dashboard
5. Deploy with `railway up`

## Monitoring
- Use Vercel Analytics for frontend monitoring
- Railway provides built-in metrics for backend
- Set up error tracking with Sentry (optional)